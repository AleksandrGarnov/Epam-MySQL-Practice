-- write SQL queries to show all information about all --
-- a) authors--
-- b) genres--    
SELECT * FROM `authors`; 
SELECT * FROM `genres`;

-- Show ids without duplication of those subscribers who visited the library at least once--
SELECT DISTINCT `sb_subscriber` FROM `subscriptions`;

-- Show the list of all subscribers along with the information of their names count --
 SELECT `s_name`, COUNT(*) AS `people_count` FROM `subscribers`
GROUP BY `s_name`;

-- write SQL queries to show --
-- a) all ids(without duplication) of all books even taken by subs--
-- b) all books along with count of times each book was taken by a subs--    

SELECT DISTINCT `sb_book`
FROM `subscriptions`;

SELECT `sb_book`,
COUNT(*) AS 'count'  
FROM `subscriptions`
group by `sb_book`

-- Write an SQL query to show how many subs are there in the library--
SELECT count(*) AS `total_subs`
from `subscribers`

-- Write an SQL queries to show --
-- a) how many times subs have taken books--
-- b)how many subs have taken books   
SELECT count(`sb_is_active`) AS `taken_books`
from `subscriptions`;

SELECT count(`sb_subscriber`) AS `active_subs`
FROM `subscriptions`
WHERE `sb_is_active` = 'Y';

-- Write an SQL query to show the first and the last dates when a book was taken by a subscriber.-- 
SELECT MIN(`sb_start`) AS `first_date`,
	MAX(`sb_start`) AS `last_date`
FROM `subscriptions`
-- Write an SQL query to show the all authors ordered by their names descending (i.e., "Z -> A").--  
SELECT `a_name`
FROM `authors`
ORDER BY `a_name` DESC

-- Write SQL queries to show-- 
-- a) books that have the number of their copies less than average number of all books copies;-- 
-- b) ids and dates of all subscriptions occurred during the first year of the library work (i.e., up to Dec 31st of the year when the first subscription had happened).--  
SELECT `b_name`, `b_quantity`
FROM `books`
WHERE `b_quantity` < (SELECT AVG(`b_quantity`) FROM `books`);

SELECT  `sb_id`,`sb_start`
FROM `subscriptions`
WHERE `sb_start`>= '2011-01-01' 
AND `sb_start` < '2011-12-31'

-- Write SQL queries to show:-- 
-- a) average number of copies of books registered in the library;-- 
-- b) average number of days a subscriber is registered in the library (the registration period starts with the first subscription date and ends with the current date).-- 
SELECT AVG(`b_quantity`) as `avg_books`
FROM `books`
SELECT AVG(DATEDIFF('2022-07-30',`sb_start`)) AS `avg_days`
FROM `subscriptions`

-- Write SQL queries to show:-- 
-- a) books written by more than one author;-- 
-- b) books that are written in exactly one genre.-- 

SELECT `b_name`, count(`a_id`) AS `count_books`
FROM `books`
  JOIN `m2m_books_authors` USING(`b_id`)
JOIN `authors` USING(`a_id`)
GROUP BY `b_id`
HAVING `count_books` >1

SELECT `b_name`, `a_name`, count(`g_name`) as `total_genres`
FROM `books`
JOIN `m2m_books_authors` USING(`b_id`)
JOIN `authors` USING(`a_id`)
JOIN `m2m_books_genres` USING(`b_id`)
JOIN `genres` USING(`g_id`)
GROUP BY `b_name`
HAVING `total_genres` = 1

-- Write SQL queries to show:-- 
-- a) all books along with their genres (books’ titles duplication is not allowed);-- 
-- b) all authors along with their books and genres (authors’ names and/or books’ titles duplication is not allowed).-- 

SELECT `b_name` AS `book`,
GROUP_CONCAT(`g_name` ORDER BY `g_name` SEPARATOR ', ') AS `genres`
FROM `books`
JOIN `m2m_books_genres` USING(`b_id`)
JOIN `genres` USING(`g_id`)
GROUP BY `b_id`
ORDER BY `b_name`

SELECT `b_name` AS `books`,
GROUP_CONCAT(DISTINCT `a_name` ORDER BY `a_name` SEPARATOR ', ') AS `authors`,
GROUP_CONCAT(DISTINCT `g_name` ORDER BY `g_name` SEPARATOR ', ') AS `genres`
FROM `books`
JOIN `m2m_books_authors` USING(`b_id`)
JOIN `authors` USING(`a_id`)
JOIN `m2m_books_genres` USING(`b_id`)
JOIN `genres` USING(`g_id`)
GROUP BY `b_id`
ORDER BY `b_name`

-- Write SQL queries to show:-- 
-- a) all books ever taken from the library (use JOIN);-- 
-- b) all books ever taken from the library (do not use JOIN);-- 
-- c) all books never taken from the library (use JOIN);-- 
-- d) all books never taken from the library (do not use JOIN).-- 

 SELECT DISTINCT `b_id`,`b_name`
 FROM `books`
 JOIN `subscriptions`
 ON `b_id` = `sb_book`

SELECT DISTINCT `b_id`,`b_name`
 FROM `books`
 WHERE `b_id` IN (SELECT DISTINCT `sb_book` FROM `subscriptions`)

SELECT `b_id`,`b_name`
 FROM `books`
 LEFT JOIN `subscriptions` ON `b_id` = `sb_book`
 WHERE `sb_book` IS NULL

 SELECT `b_id`,`b_name`
 FROM `books`
 WHERE `b_id` NOT IN (SELECT DISTINCT `sb_book` FROM `subscriptions`)
